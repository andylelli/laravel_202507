name: Build and push to ACR

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      IMAGE_NAME: laravel-aca
      GH_PAT: ${{ secrets.GH_PAT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show branch and files (debug)
        run: |
          git rev-parse --abbrev-ref HEAD
          ls -la
          sed -n '1,120p' Dockerfile || true

      # Composer dry-run OUTSIDE Docker for clearer errors
      - name: PHP 8.1 + Composer (diag)
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          coverage: none

      - name: Composer diagnose & install (no-scripts) outside Docker
        run: |
          composer --version
          composer diagnose || true
          composer install --no-dev --prefer-dist --no-scripts --no-progress -vvv || true

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push (no cache, full logs)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          no-cache: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            GITHUB_TOKEN=${{ env.GH_PAT }}

      # --- Azure login via OIDC (no secrets) ---
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Ensure the containerapp commands are available
      - name: Ensure containerapp CLI
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az extension add -n containerapp --upgrade -y || true

      # Always set Laravel to log to container stderr
      - name: Set Laravel log to stderr and info
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az containerapp update \
              -g "${{ secrets.AZURE_RG }}" \
              -n "${{ secrets.AZURE_APP }}" \
              --set-env-vars LOG_CHANNEL=stderr LOG_LEVEL=info

      # Roll the app to the freshly-pushed image
      - name: Roll Container App to latest image
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az containerapp update \
              -g "${{ secrets.AZURE_RG }}" \
              -n "${{ secrets.AZURE_APP }}" \
              --image "${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest"
